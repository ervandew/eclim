feature_adt = 'com.android.ide.eclipse.adt'

target(name: 'org.eclim.adt.classpath.prepare'){
  (version, srcDir) = adtInfo()
  unjar(dest: 'build/temp/lib/android'){
    fileset(dir: "${srcDir}"){
      include(name: "dropins/**/plugins/com.android.*_${version}.*.jar")
      include(name: "plugins/com.android.*_${version}.*.jar")
    }
    patternset{ include(name: '**/*.jar') }
  }
}

target(name: 'org.eclim.adt.classpath'){
  (version, srcDir) = adtInfo()
  fileset(dir: "${srcDir}"){
    include(name: "dropins/**/plugins/com.android.*_${version}.*.jar")
    include(name: "plugins/com.android.*_${version}.*.jar")
  }
  fileset(dir: 'build/temp/lib/android'){
    include(name: '**/*.jar')
  }
}

target(name: 'org.eclim.adt.test'){
  depends('test.init')
  runTests('org.eclim.adt'){
    //createProject('org.eclim.adt', 'eclim_unit_test_android')
  }
}

def adtInfo() {
  paths = [binding.getVariable('eclipse')]
  if (binding.getVariable('eclipse') != binding.getVariable('eclipse.local')){
    paths << binding.getVariable('eclipse.local')
  }
  version = null
  eclipseDirWithADT = null
  for (path in paths){
    for (dir in ['dropins', 'plugins', 'blah']){
      pluginsDir = new File("${path}/${dir}")
      if (!pluginsDir.exists()){
        continue
      }
      pluginsDir.eachFileRecurse { file ->
        if (file =~ /com\.android\.ide\.eclipse\.adt_.*\.jar/){
          ver = file.toString().replaceFirst(
            /.*com\.android\.ide\.eclipse\.adt_(\d+\.\d+\.\d+).*\.jar/, '$1')
          if (version == null || versionToInt(ver) > versionToInt(version)){
            version = ver
            eclipseDirWithADT = path
          }
        }
      }
    }
  }
  return [version, eclipseDirWithADT]
}
