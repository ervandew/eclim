# Copyright (C) 2005 - 2014  Eric Van Dewoestine
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

java_search.indeterminate=You must specify a valid pattern or element search.

class.not.found=Class ''{1}'' not found in project ''{0}''.
type.not.found=Type ''{1}'' not found in project ''{0}''.
type.not.a.class=Type ''{0}'' is not a java class.
src.contains.errors=Source contains errors, please fix them first.

constructor.already.exists=Constructor already exists: ''{0}''.

field.not.found=No field found with name ''{0}'' in ''{1}''.
not.a.field=Element is not a field.
check.import=Check that you have imported the type and that it is spelled correctly.

error.not.found=No error found in ''{0}'' on line number {1}.

prototype.missing.argument=Missing one of -p or -f (project or file).
prototype.header=\
     /**\n\
\u0020* Prototype generated by eclim.\n\
\u0020*\n\
\u0020* If you have the source for this library you can optionally attached it\n\
\u0020* via the .classpath file for the current project.\n\
\u0020*/\n
prototype.header.asm=\
     /**\n\
\u0020* Prototype generated by eclim.\n\
\u0020*/\n

classpath.variable.created=Created variable ''{0}''.
classpath.variable.deleted=Deleted variable ''{0}''.

ivy.repo.not.set=\
  The classpath variable ''{0}'' is not set.  Use :IvyRepo <path> to set it.
mvn.repo.not.set=\
  The classpath variable ''{0}'' is not set.  Use :MvnRepo to set it.

log4j.logger.name.invalid=No class or package found with name ''{0}''.
log4j.appender.name.invalid=No appender found with name ''{0}''.
log4j.level.name.invalid=Invalid level ''{0}''.

filter.not.found=No filter definition with name ''{0}'' defined.
servlet.not.found=No servlet definition with name ''{0}'' defined.

rename.element.unsupported=Rename of this element is currently unsupported: {0}
rename.element.unable=Unable to rename element: {0}

move.element.exists=''{0}'' already contains a ''{1}''.

junit.testing.test.not.found=\
  Unable to find the test for this class.
junit.testing.test.method.not.found=\
  Unable to find the test method for the selected method.
junit.testing.test.method.not.annotated=\
  The method ''{0}'' is not an @Test annotated method.
junit.testing.class.not.found=\
  Unable to find the class that this test case is responsible for testing.

debugging.session.started=Debugging session started.
debugging.session.stopped=Debugging session stopped.
debugging.session.absent=Debugging session not found.
debugging.session.suspended=Debugging session suspended.
debugging.thread.suspended=Debugging thread suspended.
debugging.session.resumed=Debugging session resumed.
debugging.thread.resumed=Debugging thread resumed.
debugging.stepping.thread.absent=No thread available for stepping.
debugging.stepping.thread.not.suspended=Cannot step through unsuspended thread. Suspend first.
debugging.breakpoint.added=Breakpoint added.
debugging.breakpoint.removed=Breakpoint(s) removed.
debugging.breakpoint.toggled=Breakpoint(s) {0}.
debugging.resume.thread.absent=No thread to resume.

######### Setting Descriptions #########
org.eclim.java.logging.impl=\
  Logging implementation to use (commons-logging|log4j|slf4j|jdk|custom)
org.eclim.java.logging.template=\
  When the logging implementation is ''custom'', the name of the template to use.
org.eclim.java.import.exclude=\
  List of regex patterns used to exclude import suggestions.
org.eclim.java.import.package_separation_level=\
  The number of package segments to compare to group imports.

org.eclim.java.format.strip_trialing_whitespace=\
  When formatting java code, this determines whether or not to remove\n\
  trailing whitespace.

org.eclipse.jdt.ui.project_javadoc_location=\
  URL path the javadocs for your project's source files.\n\
  Ex:\n\
  \u0020\u0020file:/home/user/projects/foo/doc\n\
  \u0020\u0020file:/c:/workspace/foo/doc
org.eclim.java.doc.version=\
  The value to use for the @version tag on class javadocs.
org.eclim.java.doc.dest=\
  The project relative directory where javadocs are written to.
org.eclim.java.doc.sourcepath=\
  The project relative, space separated, javadoc source paths to use.\n\
  Default is to use all your project''s source directories.
org.eclim.java.run.jvmargs=\
  Json formatted list of strings to supply as args to the jvm when\n\
  running your main class (Ex. ["-Dfoo=bar", "-Dbaz"])
org.eclim.java.run.mainclass=\
  Fully qualified class name which contains your project''s main method.
org.eclim.java.doc.packagenames=\
  Space separated list package names to run javadoc against.
org.eclim.java.checkstyle.config=\
  Project relative or absolute path to your checkstyle config file.
org.eclim.java.checkstyle.properties=\
  Project relative or absolute path to your checkstyle properties file.
org.eclim.java.checkstyle.onvalidate=\
  Whether or not to run checkstyle when validating java source files.

org.eclim.java.junit.output_dir=\
  The directory where your build tool writes JUnit test results.\n\
  Used by :JUnitResult to find the results for the current test.
org.eclim.java.junit.cwd=\
  The current working directory used when running JUnit tests.
org.eclim.java.junit.jvmargs=\
  Json formatted list of strings to supply as args to the jvm when\n\
  forking to run unit tests (Ex. ["-Xmx512m"])
org.eclim.java.junit.sysprops=\
  Json formatted list of strings to supply as system properties to the jvm\n\
  when forking to run unit tests (Ex. ["file.encoding=UTF8", "foo.bar=baz"])
org.eclim.java.junit.envvars=\
  Json formatted list of strings to supply as environment variables to the\n\
  jvm when forking to run unit tests (Ex. ["FOO=bar"])

org.eclipse.jdt.core.compiler.source=\
  Java version to keep source code compatible with (1.5, 1.6, etc.).
org.eclipse.jdt.ui.importorder=\
  Semicolon separated list of package names in the order that their equivalent\n\
  import statements should be sorted.

org.eclipse.jdt.core.codeComplete.camelCaseMatch=\
  Include proposals whose name match the CamelCase pattern\n\
  (enabled or disabled).
org.eclipse.jdt.core.codeComplete.deprecationCheck=\
  Filter out deprecated members and types during code completion\n\
  (enabled or disabled).
org.eclipse.jdt.core.codeComplete.visibilityCheck=\
  Filter out inaccessible members (private, etc) during code completion\n\
  (enabled or disabled).

# Command dependency
dependency.classpath.error=Could not manipulate the eclipse classpath file.
dependency.upload.jar.success=Added the library ''{0}'' to the classpath file of eclipse.
dependency.remove.jar.success=Removed the library ''{0}'' from the classpath file of eclipse.