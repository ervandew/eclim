/**
 * Copyright (C) 2005 - 2011  Eric Van Dewoestine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
import org.apache.tools.ant.BuildException
import org.apache.tools.ant.taskdefs.condition.Os

// validate the ant version
ant.antversion(property: 'ant.version.valid', atleast: '1.7.1')
antVersionValid = ant.project.getProperty('ant.version.valid')
if (antVersionValid == null){
  ant.fail(message: 'To build eclim, you must use ant 1.7.1 or greater.')
}

ant.property(environment: 'env')
ant.property(file: 'src/ant/build.properties')
ant.defaultexcludes(add: '**/*.swp')
ant.defaultexcludes(add: '**/*.bak')

eclipseHome = binding.getVariable('eclipse.home')
if (eclipseHome == '' || eclipseHome == '${env.ECLIM_ECLIPSE_HOME}'){
  ant.echo('''
    $${eclipse.home} not set.
    Please set this value one of the following ways:
    1. create a user.properties file with eclipse.home=... in it.
    2. supply the property when invoking ant: ant -Declipse.home=...
    3. set the supported environment variable: export ECLIM_ECLIPSE_HOME="..."
  ''')
  ant.fail(message: 'missing required property (see above)')
}

ant.path(id: 'classpath'){
  fileset(dir: 'lib', includes: '**/*.jar')
  fileset(dir: 'src/eclipse/plugins/', includes: '*/lib/*.jar')
  fileset(dir: '${eclipse.home}'){
    include(name: 'startup.jar')
    include(name: 'dropins/**/plugins/org.eclipse.*.jar')
    include(name: 'plugins/org.eclipse.*.jar')
    include(name: 'plugins/com.ibm.*.jar')
  }
  dirset(dir: '${eclipse.home}'){
    include(name: 'dropins/**/plugins/org.eclipse.*')
    include(name: 'plugins/org.eclipse.*')
  }
  // for gentoo
  fileset(dir: '/usr/share/', erroronmissingdir: false){
    include(name: 'swt-*/lib/*.jar')
  }
}

target(name: 'init'){
  File dotversion = new File("${basedir}/.version")
  if (dotversion.exists()){ // only used by source distribution (tar.gz)
    version = dotversion.getText().trim()
  }else{
    // set eclim version based on current repos state (most recent tag w/
    // possible suffix including number of revisions since that tag + last commit
    // id, if last tag is not at the head)
    version = execute('git', 'describe')
    // ensure version is a valid osgi version
    version = version.replaceFirst(/^(\d+\.\d+\.\d+)-(\d+-\w+)$/, '$1.$2')
  }
  property(name: 'eclim.version', value: version)
  echo('eclim.version: ${eclim.version}')

  property(name: 'eclim.plugins', value: '${eclipse.home}/plugins')
  property(name: 'eclim.home', value: '${eclim.plugins}/org.eclim_${eclim.version}')

  // set location of vim files if not already set
  if (!hasVariable('vim.files')){
    property(name: 'vim.files', value: (
      Os.isFamily(Os.FAMILY_WINDOWS) ?
      '${user.home}/vimfiles' : '${user.home}/.vim'
    ))
  }
}

target(name: 'clean'){
  delete(dir: 'build')
  delete(file: 'src/nailgun/ng')
}

target(name: 'build'){
  depends('build.eclipse', 'build.vim')
}

target(name: 'build.eclipse'){
  depends(init)

  delete(includeemptydirs: true, failonerror: false){
    fileset(dir: '${build.plugins}', includes: '**/*')
  }

  // build shared source
  mkdir(dir: '${build.classes}')
  compile('src/java', '${build.classes}'){
    include(name: '**/*.java')
    exclude(name: '**/plugin/*/**/*.java')
    javaVersion = System.getProperty('java.version').replaceFirst(/_\d.*/, '')
    if (javaVersion < '1.6.0'){
      exclude(name: 'org/eclim/annotation/CommandListingProcessor.java')
    }
  }

  mkdir(dir: '${build.plugins}/org.eclim_${eclim.version}/lib')

  // eclim jar file
  jar(jarfile: '${build.plugins}/org.eclim_${eclim.version}/eclim.jar'){
    fileset(dir: '${build.classes}'){
      include(name: 'org/eclim/**/*.class')
      include(name: 'org/eclipse/**/*.class')
      exclude(name: 'org/eclim/misc/**/*.class')
      exclude(name: 'org/eclim/plugin/*/**/*.class')
    }
    fileset(dir: 'src/java'){
      include(name: 'org/eclim/**/*')
      include(name: 'org/eclipse/**/*')
      exclude(name: 'org/eclim/misc/')
      exclude(name: 'org/eclim/misc/*/')
      exclude(name: 'org/eclim/misc/**/*.class')
      exclude(name: 'org/eclim/plugin/*/')
      exclude(name: 'org/eclim/plugin/*/**/*')
      exclude(name: '**/package.html')
      exclude(name: '**/*.java')
    }
  }

  // eclim misc jar file
  jar(jarfile: '${build.plugins}/org.eclim_${eclim.version}/eclim-misc.jar'){
    fileset(dir: '${build.classes}', includes: 'org/eclim/misc/**/*.class')
    fileset(dir: 'src/java',
      includes: 'org/eclim/misc/*/**/*',
      excludes: '**/package.html,**/*.java')
  }

  copy(todir: '${build.plugins}/org.eclim_${eclim.version}'){
    fileset(dir: '.', includes: 'src/nailgun/**/*')
  }

  copy(todir: '${build.plugins}/org.eclim_${eclim.version}/bin'){
    fileset(dir: 'src/shell', includes: '**/*')
  }
  if(!Os.isFamily(Os.FAMILY_WINDOWS)){
    uptodate(property: 'ng.uptodate', targetfile: 'src/nailgun/ng') {
      srcfiles(dir: 'src/nailgun'){
        include(name: 'src/c/ng.c')
        include(name: 'Makefile.in')
        include(name: 'configure')
        include(name: 'configure.ac')
      }
    }
    try{
      ngUptodate = binding.getVariable('ng.uptodate')
    }catch(Exception e){
      ngUptodate = false
    }
    if (!ngUptodate) {
      exec(executable: 'configure', dir: 'src/nailgun', resolveexecutable: 'true')
      exec(executable: 'make', dir: 'src/nailgun')
    }
    copy(file: 'src/nailgun/ng',
        todir: '${build.plugins}/org.eclim_${eclim.version}/bin')
  }

  plugin('org.eclim')
  pluginNames = ['core'] + binding.getVariable('plugins').split(',').flatten()
  pluginNames.each(){
    name -> plugin("org.eclim.${name}", name)
  }

  // patch nailgun jar file
  jar(jarfile: '${build.plugins}/org.eclim_${eclim.version}/lib/nailgun-0.7.1.jar',
      update: 'true'){
    fileset(dir: '${build.classes}',
        includes: 'com/martiansoftware/nailgun/**/*.class')
  }

  // patch tagsoup jar file
  tagsoup = '${build.plugins}/org.eclim.wst_${eclim.version}/lib/tagsoup-1.2.jar'
  if (new File(tagsoup).exists()){
    jar(jarfile: tagsoup, update: true){
      fileset(dir: '${build.classes}',
          includes: 'org/ccil/cowan/tagsoup/**/*.class')
    }
  }

  // build vimplugin
  ant.echo("\nbuilding plugin: org.eclim.vimplugin\n")
  vimpluginDir = '${build.plugins}/org.eclim.vimplugin_${eclim.version}'

  copy(todir: vimpluginDir){
    fileset(dir: 'src/eclipse/plugins/org.eclim.vimplugin', includes: '**/*')
  }

  replace(dir: vimpluginDir,
      includes: "bin/**/*, about.html, plugin.properties, META-INF/MANIFEST.MF"){
    replacefilter(token: '$${eclim.version}', value: '${eclim.version}')
  }

  jar(jarfile: "${vimpluginDir}/eclim-vimplugin.jar"){
    fileset(dir: '${build.classes}', includes: 'org/vimplugin/**/*.class')
    fileset(dir: 'src/java',
        includes: 'org/vimplugin/**/*',
        excludes: '**/package.html,**/*.java')
  }
}

target(name: 'build.vim'){
  depends(init)
  mkdir(dir: '${build.vimfiles}')
  delete(dir: '${build.vimfiles}/eclim')
  delete(dir: '${build.vimfiles}/plugin')
  copy(todir: '${build.vimfiles}'){
    fileset(dir: 'src/vim', includes: '**/*', excludes: '${vimfiles.exclude}')
  }

  // rope for python support
  untar(compression: 'gzip', dest: '${build.vimfiles}/eclim/autoload/eclim/python'){
    fileset(dir: 'lib', includes: 'rope-*.tar.gz')
    patternset(includes: 'rope-*/rope/**/*')
    mapper(type: 'regexp', from: '^.*?/(.*)', to: '\\1')
  }
}

target(name: 'deploy'){
  depends('deploy.eclipse', 'deploy.resources', 'deploy.vim')
}

target(name: 'deploy.eclipse'){
  depends('build.eclipse')

  version = binding.getVariable('eclim.version')

  mkdir(dir: '${eclim.plugins}')

  // if the eclim version has changed, stop eclimd before deploying
  pluginsDir = new File(binding.getVariable('eclim.plugins'))
  existing = null
  pluginsDir.eachDirMatch(~/org\.eclim_.*/){
    file -> existing = file
  }

  if (existing != null && existing.getName() != "org.eclim_${version}"){
    echo('###\n# New eclim version, shutting down old version...###')
    instances = new File(binding.getVariable('user.home') + '/.eclim/.eclimd_instances')
    if (instances.exists()){
      instances.eachLine { line ->
        port = line.replaceFirst(/.*:/, '')
        echo("#  shutdown: ${line}")
        eclim('-command shutdown',
          port=port, failonerror=false, dir=existing.toString() + '/bin')
      }
    }
    echo('###')
  }

  delete(includeemptydirs: true){
    fileset(dir: '${eclim.plugins}', includes: 'org.eclim*/**/*')
    dirset(dir: '${eclim.plugins}', includes: 'org.eclim*')
  }

  copy(todir: '${eclim.plugins}'){
    fileset(dir: '${build.plugins}', includes: '**/*')
  }

  if (Os.isFamily(Os.FAMILY_WINDOWS)){
    move(todir: '${eclipse.home}'){
      fileset(dir: '${eclim.plugins}/org.eclim_${eclim.version}/bin',
          includes: 'eclimd.bat,eclimd.cmd')
    }
  }else{
    chmod(dir: '${eclim.plugins}/org.eclim_${eclim.version}/bin',
        includes: '**/*', excludes: '*.sed', perm: 'ugo+x')
    // java symlink support sucks, especially if the link is broken
    exec(executable: 'rm'){
      arg(line: '"${eclipse.home}/eclim" "${eclipse.home}/eclimd"')
    }
    exec(executable: 'ln', dir: '${eclipse.home}'){
      arg(line: '-s plugins/org.eclim_${eclim.version}/bin/eclim .')
    }
    exec(executable: 'ln', dir: '${eclipse.home}'){
      arg(line: '-s plugins/org.eclim_${eclim.version}/bin/eclimd .')
    }
  }

  replace(file: '${eclim.plugins}/org.eclim_${eclim.version}/plugin.properties',
      token: '$${vim.files}" value="${vim.files}')
  replace(dir: '${eclim.plugins}/org.eclim.vimplugin_${eclim.version}',
      includes: 'plugin.properties'){
    replacefilter(token: '$${eclim.gvim}', value: '${eclim.gvim}')
    replacefilter(token: '$${eclim.gvim.embed}', value: '${eclim.gvim.embed}')
  }

  // precautionary forcing of bundles.info to have the correct bundle versions
  // I don't like this one bit, it's hacky as all hell. Hopefully one day
  // eclipse won't need its hand held (could convert to using dropins, but I've
  // had issues with that as well in the past)
  replaceregexp(
    file: '${eclipse.home}/configuration/org.eclipse.equinox.simpleconfigurator/bundles.info',
    match: 'org.eclim(.[a-z]+)?([,_])\\d+\\.\\d+\\.\\d+(\\.\\d+-g[a-f0-9]+)?',
    replace: 'org.eclim\\1\\2${eclim.version}',
    flags: 'g')
}

target(name: 'deploy.resources'){
  copy(todir: '${user.home}/.eclim/resources', overwrite: true){
    fileset(dir: 'src/resources', includes: '**/*')
  }
}

target(name: 'deploy.vim'){
  depends('build.vim')

  delete(includeemptydirs: true, failonerror: false){
    fileset(dir: '${vim.files}/eclim',
      includes: '**/*',
      excludes: 'after/**/*, doc/**/*, resources/**/*')
  }
  copy(todir: '${vim.files}', overwrite: true){
    fileset(dir: '${build.vimfiles}', includes: '**/*')
  }

  replace(file: '${vim.files}/eclim/plugin/eclim.vim'){
    replacefilter(token: '"$${vim.eclim.home}"',
        value: 'let g:EclimHome = \'${eclim.home}\'')
    replacefilter(token: '"$${vim.eclipse.home}"',
        value: 'let g:EclimEclipseHome = \'${eclipse.home}\'')
  }
}

target(name: 'test.init'){
  depends('init')

  // we can't overwrite jar files on windows while eclimd is running so we skip
  // the deploy here and instead require the user to ensure the latest code has
  // been deployed prior to testing.
  if (!Os.isFamily(Os.FAMILY_WINDOWS)){
    depends('deploy')
  }

  property(file: 'src/test/resources/eclimrc.test')
  property(name: 'test.include', value: '**/*Test')

  userHome = binding.getVariable('user.home').replace('\\', '/')
  property(name: 'eclipse.workspace', value: "${userHome}/workspace.unittest")

  if (!pingEclim(Integer.parseInt(binding.getVariable('nailgun.server.port')))){
    fail(message: 'Failed to connect to test eclimd instance.')
  }

  delete(includeEmptyDirs: true, failonerror: false){
    fileset(dir: '${user.home}/.eclim/cache', includes: '**/*')
  }

  delete(includeEmptyDirs: true, failonerror: false){
    fileset(dir: '${eclipse.workspace}', includes: 'unit_test_*/**/*')
    fileset(dir: '${eclipse.workspace}', includes: 'unit_test_*')
  }
}

target(name: 'test'){
  depends(
    'test.core',
    'test.jdt',
    'test.cdt',
    'test.pdt',
    'test.python',
    'test.wst',
    'test.dltkruby',
  )
}

target(name: 'test.core'){
  depends('test.init')
  createProject('eclim_unit_test'){
    delete(dir: '${eclipse.workspace}/eclim_unit_test_linked',
        includeEmptyDirs: 'true')
    copy(todir: '${eclipse.workspace}'){
      fileset(dir: 'src/test/resources', includes: 'eclim_unit_test_linked/**/*')
    }
  }
  test{
    junit('org/eclim/plugin/core/**/*')
    vunit('eclim/autoload/*')
    vunit('eclim/autoload/eclim/*')
    vunit('eclim/autoload/eclim/common/*')
    vunit('eclim/autoload/eclim/project/*')
  }
}

target(name: 'test.jdt'){
  depends('test.init')
  createProject('eclim_unit_test_java'){
    delete(dir: '${eclipse.workspace}/eclim_unit_test_java_linked',
        includeEmptyDirs: 'true')
    copy(todir: '${eclipse.workspace}'){
      fileset(dir: 'src/test/resources',
          includes: 'eclim_unit_test_java_linked/**/*')
    }
  }
  test{
    junit('org/eclim/plugin/ant/**/*')
    junit('org/eclim/plugin/jdt/**/*')
    junit('org/eclim/plugin/maven/**/*')
    vunit('eclim/autoload/eclim/java/**/*')
  }
}

target(name: 'test.cdt'){
  depends('test.init')
  createProject('eclim_unit_test_c')
  test{
    junit('org/eclim/plugin/cdt/**/*')
    vunit('eclim/autoload/eclim/c/**/*')
  }
}

target(name: 'test.pdt'){
  depends('test.init')
  createProject('eclim_unit_test_php')
  test{
    junit('org/eclim/plugin/pdt/**/*')
    vunit('eclim/autoload/eclim/php/**/*')
  }
}

target(name: 'test.python'){
  depends('test.init')
  createProject('eclim_unit_test_python')
  test{
    vunit('eclim/autoload/eclim/python/**/*')
  }
}

target(name: 'test.wst'){
  depends('test.init')
  createProject('eclim_unit_test_web')
  test{
    junit('org/eclim/plugin/wst/**/*')
    vunit('eclim/autoload/eclim/css/**/*')
    vunit('eclim/autoload/eclim/dtd/**/*')
    vunit('eclim/autoload/eclim/html/**/*')
    vunit('eclim/autoload/eclim/xml/**/*')
    vunit('eclim/autoload/eclim/xsd/**/*')
  }
}

target(name: 'test.dltkruby'){
  depends('test.init')

  // create interpreter before creating the project
  if (Os.isFamily(Os.FAMILY_WINDOWS)){
    property(name: 'ruby.path', value: 'C:/Ruby/bin/ruby.exe')
  }else{
    property(name: 'ruby.path', value: '/usr/bin/ruby')
  }
  eclim('-command dltk_remove_interpreter -n ruby -i "${ruby.path}"')
  eclim('-command dltk_add_interpreter -n ruby -t ruby -i "${ruby.path}"')
  createProject('eclim_unit_test_ruby')

  test{
    junit('org/eclim/plugin/dltkruby/**/*')
    vunit('eclim/autoload/eclim/ruby/**/*')
  }
}

target(name: 'dist'){
  // ensure that we are building with the lowest supported jdk.
  //if (binding.getVariable('ant.java.version') != binding.getVariable('javac.target')){
  //  fail(message: 'Distribution must be built with jdk ${javac.target}')
  //}

  depends('clean', 'build', 'javadoc', 'docs', 'vimdocs')

  mkdir(dir: '${build.installer}')

  // docs archive
  zip(destfile: '${build.plugins}/org.eclim_${eclim.version}/doc.zip'){
    fileset(dir: 'build/doc', includes: 'api/**/*, site/**/*')
  }

  // src archive
  zip(destfile: '${build.plugins}/org.eclim_${eclim.version}/src.zip'){
    fileset(dir: 'src/java', includes: '**/*')
  }

  // eclipse plugin archives
  zip(destfile: '${build.installer}/eclipse-plugins.zip'){
    fileset(dir: '${build.plugins}/'){
      include(name: 'org.eclim_${eclim.version}/**/*')
      include(name: 'org.eclim.*_${eclim.version}/**/*')
      exclude(name: 'org.eclim.installer*_${eclim.version}/**/*')
      exclude(name: 'org.eclim.installer*_${eclim.version}')
    }
    zipfileset(dir: 'src/shell', prefix: 'org.eclim_${eclim.version}/bin/'){
      include(name: '**/*')
    }
  }

  // eclim resources jar
  zip(destfile: '${build.installer}/resources.zip'){
    zipfileset(dir: 'src/resources', prefix: 'resources', includes: '**/*')
  }

  // vim plugins jar
  zip(destfile: '${build.installer}/vim-plugins.zip'){
    fileset(dir: '${build.vimfiles}', includes: '**/*')
    zipfileset(dir: 'build/doc/vimdocs', prefix: 'eclim/doc', includes: '**/*.txt')
  }

  installer()

  // full source tar
  version = binding.getVariable('eclim.version')
  new File("${basedir}/build/.version").withWriter(){ out ->
    out.writeLine("${version}")
  }
  tar(destfile: 'build/dist/eclim_${eclim.version}.tar.gz',
      compression: 'gzip', longfile: 'gnu'){
    tarfileset(dir: 'build/', prefix: 'eclim_${eclim.version}'){
      include(name: '.version')
    }
    tarfileset(dir: '.', prefix: 'eclim_${eclim.version}'){
      include(name: '**/*')
      exclude(name: '.git/**/*')
      exclude(name: '.git/')
      exclude(name: '.ropeproject/**/*')
      exclude(name: '.ropeproject/')
      exclude(name: 'build/**/*')
      exclude(name: 'build/')
      exclude(name: 'src/patch/**/*')
      exclude(name: 'src/patch/')
      exclude(name: 'src/nailgun/config.log')
      exclude(name: 'src/nailgun/config.status')
      exclude(name: 'src/nailgun/Makefile')
      exclude(name: 'src/nailgun/ng')
    }
  }
}

target(name: 'installer'){
  depends('init')
  exec(executable: '${formic.home}/bin/formic', failonerror: true, dir: '.'){
    arg(value: '-Declipse.home=${eclipse.home}')
    arg(value: '-Declim.version=${eclim.version}')
    arg(value: '-buildfile')
    arg(value: 'src/installer/build.xml')
  }
}

target(name: 'javadoc'){
  mkdir(dir: 'build/doc/api')

  includes = new StringBuffer()
  pluginNames = binding.getVariable('plugins').split(',')
  pluginNames.each(){ name ->
    if(includes.size() != 0){
      includes.append(',')
    }
    includes.append("org/eclim/plugin/${name}/**/*.java")
  }

  javadoc(sourcepath: 'src/java', packagenames: 'org.eclim', destdir: 'build/doc/api'){
    classpath(refid: 'classpath')
    fileset(dir: 'src/java'){
      include(name: 'org/ec*/**/*.java')
      include(name: 'org/eclim/plugin/*.java')
      exclude(name: 'org/eclim/plugin/*/**/*.java')
    }
    fileset(dir: 'src/java',
        includes: "org/eclim/plugin/core/**/*.java,${includes}")
  }
}

target(name: 'docs'){
  property(name: 'sphinx.args', value: '')
  mkdir(dir: 'build/doc/site')

  // generate site documention via sphinx
  exec(executable: 'bin/sphinx', failonerror: true, dir: '.'){
    arg(line: '${sphinx.args} -b eclim src/doc/content build/doc/site')
  }

  // copy over any images that sphinx neglects to
  copy(todir: 'build/doc/site/_images'){
    fileset(dir: 'src/doc/content/images', includes: '**/*')
  }

  echo(file: 'build/doc/site/google4c368e38cc6ac62e.html',
      'google-site-verification: google4c368e38cc6ac62e.html')

  replace(dir: 'build/doc/site', includes: '**/*.html'){
    replacefilter(token: '$${eclim.version}', value: '${eclim.version}')
  }

  // support for google sitemap
  echo('Building sitemap.xml...')
  basedir = binding.getVariable('basedir')
  new File("${basedir}/build/doc/site/sitemap.xml").withWriter(){ out ->
    out.writeLine('<?xml version="1.0" encoding="UTF-8"?>')
    out.writeLine('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')
    new File("${basedir}/build/doc/site").eachFileRecurse(){ file ->
      if (file =~ /.*\.html$/){
        path = file.getPath().replace("${basedir}/build/doc/site/", '')
        out.writeLine("<url><loc>http://eclim.org/${path}</loc></url>")
      }
    }
    out.writeLine('</urlset>')
  }
  gzip(src: 'build/doc/site/sitemap.xml', destfile: 'build/doc/site/sitemap.xml.gz')
  delete(file: 'build/doc/site/sitemap.xml')
}

target(name: 'vimdocs'){
  depends('init')

  property(name: 'sphinx.args', value: '')
  mkdir(dir: 'build/doc/vimdocs')

  // generate site documention via sphinx
  exec(executable: 'sphinx-build', failonerror: true, dir: '.'){
    arg(line: '${sphinx.args} -b vimdoc src/doc/content build/doc/vimdocs')
  }

  delete(dir: '${vim.files}/eclim/doc')
  copy(todir: '${vim.files}/eclim/doc'){
    fileset(dir: 'build/doc/vimdocs',
      includes: '**/*',
      excludes: '.doctrees/**/*, .doctrees')
  }
}

target(name: 'checkstyle'){
  path(id: 'checkstyle-classpath'){
    fileset(dir: 'src/ant/lib/', includes: 'checkstyle-all-*.jar')
  }
  taskdef(resource: 'checkstyletask.properties', classpathref: 'checkstyle-classpath')
  checkstyle(config: 'src/java/checkstyle.xml'){
    fileset(dir: 'src/java',
      includes: 'org/eclim/**/*.java',
      excludes: 'org/eclim/util/file/BufferedReader.java')
    fileset(dir: 'src/installer/java', includes: '**/*.java')
    fileset(dir: 'src/test/junit', includes: '**/*.java')
    //property(key: 'checkstyle.cache.file', file: 'build/temp/checkstyle/cache')
  }
}

target(name: 'eclipse.docs'){
  eclipseHome = binding.getVariable('eclipse.home')
  new File("${eclipseHome}/plugins").eachFileMatch(~/.*\.doc\..*\.jar/){ file ->
    docDir = file.getName().replaceFirst('_.*', '')
    unjar(src: file.getPath(), dest: "${eclipseHome}/docs/${docDir}")
  }
}

target(name: 'eclipse.src'){
  eclipseHome = binding.getVariable('eclipse.home')
  new File("${eclipseHome}/plugins").eachFileRecurse(){ file ->
    if (file =~ /.*\.source_.*\.jar/){
      unjar(src: file.getPath(), dest: '${eclipse.home}/src')
    }
  }
}

target(name: 'patch.all'){
  patchPlugins(){ plugin ->
    eclipseHome = binding.getVariable('eclipse.home')
    path = new File(patchPluginResolve(plugin))

    echo("Patching plugin: ${path}")

    mkdir(dir: "build/patch/${plugin}/classes")
    compile("src/patch/${plugin}", "build/patch/${plugin}/classes"){
      include(name: '**/*.java')
      classpath{
        pathelement(path: '${build.classes}')
      }
    }

    if (path.isDirectory()){
      // backup plugin dir if necessary
      if (!new File("${eclipseHome}/patch.backup/${path.name}").exists()){
        mkdir(dir: "${eclipseHome}/patch.backup")
        exec(executable: 'cp', failonerror: true){
          arg(line: "-a ${path} ${eclipseHome}/patch.backup/")
        }
      }
      copy(todir: "${path}"){
        fileset(dir: "build/patch/${plugin}/classes", includes: '**/*.class')
      }
    }else{
      // backup plugin file if necessary
      if (!new File("${path}.bak").exists()){
        exec(executable: 'cp', failonerror: true){
          arg(line: "-a ${path} ${path}.bak")
        }
      }

      jar(jarfile: path, update: true){
        fileset(dir: "build/patch/${plugin}/classes", includes: '**/*.class')
      }
    }
  }
}

target(name: 'patch.revert.all'){
  patchPlugins(){ plugin ->
    path = new File(patchPluginResolve(plugin))

    echo("Reverting patch for plugin: ${path}")

    if (path.isDirectory()){
      if (new File("${eclipseHome}/patch.backup/${path.name}").exists()){
        exec(executable: 'rm', failonerror: true){
          arg(line: "-r ${path}")
        }
        exec(executable: 'mv', failonerror: true){
          arg(line: "${eclipseHome}/patch.backup/${path.name} ${path}")
        }
      }
    }else{
      if (new File("${path}.bak").exists()){
        move(file: "${path}.bak", tofile: path)
      }
    }

    delete(dir: "build/patch/${plugin}")
  }
}

def compile(srcdir, destdir, failonerror=true, errorproperty=null, nested){
  ant.javac(
      destdir: destdir,
      srcdir: srcdir,
      classpathref: 'classpath',
      debug: 'on', optimize: false, deprecation: '${javac.deprecation}',
      target: '${javac.target}', source: '${javac.target}',
      failonerror: failonerror,
      errorproperty: errorproperty,
      includeantruntime: false,
      nested)
}

def plugin(name, shortName=null){
  ant.echo("\nbuilding plugin: ${name}\n")

  version = binding.getVariable('eclim.version')
  pluginsDir = binding.getVariable('build.plugins')
  pluginPath = "${pluginsDir}/${name}_${version}"

  if (shortName != null){
    ant.mkdir(dir: pluginPath)

    compile('src/java', '${build.classes}',
        failonerror=false, errorproperty='javac.failed'){
      include(name: "**/plugin/${shortName}/**/*.java")
    }

    if (hasVariable('javac.failed')){
      ant.echo("""
        Failed to compile eclim plugin '${name}'.
        Check that your eclipse install has the necessary dependencies,
        or only compile eclim with the features that your eclipse version
        supports.

        For example:

        \$ ant -Dplugins=ant,jdt

        Please see the developer guide for more details:
        http://eclim.org/guides/development.html
      """)
      ant.fail(message: "Failed to build plugin: ${name}")
    }

    ant.jar(jarfile: "${pluginPath}/eclim.${shortName}.jar"){
      ant.fileset(dir: '${build.classes}',
          includes: "**/plugin/${shortName}/**/*.class")
      ant.fileset(dir: 'src/java',
          includes: "**/plugin/${shortName}/**/*",
          excludes: '**/package.html,**/*.java')
    }
  }

  ant.copy(todir: pluginPath){
    ant.fileset(dir: "src/eclipse/plugins/${name}", includes: '**/*')
  }

  ant.replace(dir: pluginPath,
      includes: 'bin/**/*,about.html,plugin.properties,META-INF/MANIFEST.MF'){
    ant.replacefilter(token: '$${eclim.version}', value: '${eclim.version}')
  }

  // build list of jar files for main plugin's manifest.
  libDir = new File("${pluginPath}/lib")
  if (libDir.exists()){
    StringBuffer jars = new StringBuffer()
    libDir.eachFileMatch(~/.*\.jar$/){ file ->
      if(jars.size() != 0){
        jars.append(',\n  ')
      }
      jars.append('lib/' + file.getName())
    }

    ant.replace(dir: pluginPath, includes: 'META-INF/MANIFEST.MF'){
      ant.replacefilter(token: '$${eclim.lib.jars}', value: jars)
    }

    ant.fixcrlf(srcdir: pluginPath, includes: 'META-INF/MANIFEST.MF', eol: 'unix')
  }
}

def test(nested){
  nested()
  ant.fail(message: 'One or more tests failed.', if: 'junit.failed')
  ant.fail(message: 'One or more tests failed.', if: 'vunit.failed')
}

def junit(include){
  ant.mkdir(dir: 'build/test/junit/results')
  ant.mkdir(dir: 'build/test/junit/classes')

  compile('src/test/junit', 'build/test/junit/classes'){
    ant.include(name: 'org/eclim/*.java')
    ant.include(name: include + '.java')
    ant.classpath{
      ant.pathelement(path: '${build.classes}')
    }
  }

  ant.path(id: 'junit'){
    ant.pathelement(location: 'lib/junit-4.9.jar')
  }
  ant.taskdef(name: 'junit', classpathref: 'junit',
      classname: 'org.apache.tools.ant.taskdefs.optional.junit.JUnitTask')
  ant.taskdef(name: 'junitreport', classpathref: 'junit',
      classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator')

  ant.junit(printsummary: 'yes', failureproperty: 'junit.failed'){
    ant.classpath{
      ant.path(refid: 'junit')
      ant.fileset(dir: 'src/eclipse/plugins/org.eclim/lib'){
        ant.include(name: 'commons-lang-*.jar')
      }
      ant.pathelement(path: '${build.classes}')
      ant.pathelement(path: 'build/test/junit/classes')
    }
    ant.formatter(type: 'xml')
    ant.batchtest(fork: 'yes', todir: 'build/test/junit/results'){
      ant.fileset(
        dir: 'build/test/junit/classes',
        includes: include + 'Test.class')
    }
    ant.sysproperty(key: 'eclipse.home', value: '${eclipse.home}')
    ant.sysproperty(key: 'eclim.version', value: '${eclim.version}')
    ant.sysproperty(key: 'eclimd.port', value: '${nailgun.server.port}')
  }
}

def vunit(include){
  ant.mkdir(dir: 'build/test/vunit/results')

  ant.taskdef(resource: 'vunit/ant.properties'){
    ant.classpath{
      ant.fileset(dir: 'src/ant/lib', includes: 'vunit.jar')
    }
  }

  ant.vunit(todir: 'build/test/vunit/results',
      failureproperty: 'vunit.failed'){
    ant.sysproperty(key: 'g:TestEclimWorkspace', value: '${eclipse.workspace}/')
    ant.pathelement(path: '${vim.files}')
    ant.plugin(name: 'plugin/eclim.vim')
    ant.fileset(dir: 'src/test/vunit', includes: include + 'Test.vim')
  }
}

def createProject(project, extra=null){
  if (ant.project.getProperty('test.quick') != null){
    return
  }

  workspace = binding.getVariable('eclipse.workspace')

  ant.echo("Creating test project: ${project}...")

  eclim("-command project_delete -p ${project}")
  ant.delete(dir: "${workspace}/${project}", includeEmptyDirs: true)

  // hack for apparent race condition on delete of files, eclipse syncing, and
  // project resource creation
  ant.sleep(seconds: 1)

  ant.copy(todir: '${eclipse.workspace}'){
    ant.fileset(dir: 'src/test/resources', includes: "${project}/**/*")
  }
  eclim("-command project_import -f \"${workspace}/${project}\"")

  if (extra){
    extra()
  }

  // wait for any workspace building to start and then finish
  Thread.sleep(1000)
  while(true){
    eclim("-command jobs")
    result = new File('build/eclim.log').getText()
    if (result =~ /- running\b/){
      Thread.sleep(1000)
    }else{
      break
    }
  }
}

def eclim(args, port=null, failonerror=true, dir=null){
  if (port == null){
    eclimrc = "${basedir}/src/test/resources/eclimrc.test"
    new File(eclimrc).eachLine { line ->
      if (line.startsWith('nailgun.server.port')){
        port = line.split('=')[1]
      }
    }
  }

  try {
    if (Os.isFamily(Os.FAMILY_WINDOWS)){
      if (dir == null){
        eclimCmd = binding.getVariable('eclipse.home') + '/eclim.cmd'
      }else{
        eclimCmd = dir + '/eclim.cmd'
      }
      drive = eclimCmd.substring(0, 2)
      ant.exec(executable: 'cmd.exe', failonerror: failonerror,
          output: 'build/eclim.log', append: false){
        ant.arg(value: '/c')
        ant.arg(value: "${drive} && \"${eclimCmd}\" --nailgun-port ${port} ${args}")
      }
    }else{
      if (dir == null){
        eclimCmd = binding.getVariable('eclipse.home') + '/eclim'
      }else{
        eclimCmd = dir + '/eclim'
      }
      ant.exec(executable: eclimCmd, failonerror: failonerror,
          output: 'build/eclim.log', append: false){
        ant.arg(line: "--nailgun-port ${port} ${args}")
      }
    }
  }catch(BuildException be){
    log = new File("${basedir}/build/eclim.log")
    if (log.exists()){
      ant.echo(log.getText())
    }
    throw be
  }
}

def execute(exe, args, failonerror=true, output=null, append=false){
  // use a temp file to get a good random property name since ant properties
  // can only be set once.
  file = File.createTempFile('gant', '')
  file.delete()
  name = file.name

  values = [outputproperty: name, failonerror: failonerror, append: append]
  values['executable'] = Os.isFamily(Os.FAMILY_WINDOWS) ? 'cmd.exe' : exe
  if (output != null){
    values['output'] = output
  }

  ant.exec(values){
    if (Os.isFamily(Os.FAMILY_WINDOWS)){
      ant.arg(value: '/c')
      ant.arg(line: "${exe} ${args}")
    }else{
      ant.arg(line: args)
    }
  }

  return binding.getVariable(name).trim()
}

def pingEclim(port){
  try{
    new Socket('localhost', port).withStreams(){ input, output ->
      output.write(nailgunPacket('A', '-command'))
      output.write(nailgunPacket('A', 'ping'))
      output.write(nailgunPacket('C', 'org.eclim.command.Main'))

      // fixme: needs to handle parsing the response data
      //response = new StringBuffer()
      //int bytesRead = 0
      //byte[] data = new byte[1024]
      //while((bytesRead = input.read(data)) != -1){
      //  response.append(new String(data, 0, bytesRead))
      //}
      //echo(response)
    }
    return true
  }catch(IOException ioe){
    ant.echo("Unable to connect to eclimd on port ${port}: ${ioe.message}")
    return false
  }
}

def nailgunPacket(type, value){
  length = value.length()

  byte[] packet = new byte[5 + length]
  packet[0] = (length >> 24) & 0xff;
  packet[1] = (length >> 16) & 0xff;
  packet[2] = (length >> 8) & 0xff;
  packet[3] = length & 0xff;
  packet[4] = (byte)type;
  System.arraycopy(value.getBytes(), 0, packet, 5, length)
  return packet
}

def hasVariable(name){
  try{
    binding.getVariable(name)
    return true;
  }catch(MissingPropertyException mpe){
    return false;
  }
}

def patchPlugins(closure){
  def plugins = []
  new File('src/patch').eachDir(){ dir ->
    plugins.add(dir.name)
  }
  if (plugins.size() == 0){
    fail(message: 'No plugin patch directories found.')
  }
  plugins.each(closure)
}

def patchPluginResolve(plugin){
  // try plugin jar
  ant.path(id: 'plugin_jar' + plugin){
    ant.fileset(dir: '${eclipse.home}'){
      ant.include(name: "plugins/${plugin}_*.jar")
      ant.include(name: "dropins/**/plugins/${plugin}_*.jar")
    }
  }
  ant.property(name: 'plugin_jar' + plugin, refid: 'plugin_jar' + plugin)
  pluginJar = binding.getVariable('plugin_jar' + plugin)
  if (pluginJar != null && pluginJar != ''){
    return pluginJar
  }

  // try plugin dir
  ant.path(id: 'plugin_dir' + plugin){
    ant.dirset(dir: '${eclipse.home}'){
      ant.include(name: "plugins/${plugin}_*")
      ant.include(name: "dropins/**/plugins/${plugin}_*")
    }
  }
  ant.property(name: 'plugin_dir' + plugin, refid: 'plugin_dir' + plugin)
  pluginDir = binding.getVariable('plugin_dir' + plugin)
  if (pluginDir != null && pluginDir != ''){
    return pluginDir
  }

  eclipseHome = binding.getVariable('eclipse.home')
  ant.fail(message:
    "No plugin jar file or dir found for '${plugin}' in '${eclipseHome}'.")
}
